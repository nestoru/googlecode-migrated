= Web Development =

After several years of programming for the Web I am still looking for the ideal WEB framework ;-) I even built my own one (http://thinkinginsoftware.blogspot.com/). Currently I am testing Rails and Grails.


= Grails =
To check in Grails projects into svn read this article http://docs.codehaus.org/display/GRAILS/Checking+Projects+into+SVN

== collab-todo ==
Maintained in http://nestorurquiza.googlecode.com/svn/trunk/collab-todo/ I have started with "Beginning Groovy and Grails: From Novice to Professional" which you can buy in http://www.amazon.com/gp/product/1430210451/ref=cm_rdp_product. While learning from this book I have been playing with vim, cream and groovy Eclipse plugin so far. Debugging has been a challenge BTW (http://jira.codehaus.org/browse/GROOVY-2208)

=== Application code ===
For the Authentication chapter (7) I found explanations incomplete basically but thanks to that I was forced to play and learn about Spring Security (aka Acegi). I recommend to  follow directions from http://docs.codehaus.org/display/GRAILS/AcegiSecurity+Plugin+-+Basic+Tutorial configuring request maps from SecurityConfig.groovy
{{{
requestMapString = """
		CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
		PATTERN_TYPE_APACHE_ANT


		
		/todo/**=IS_AUTHENTICATED_FULLY
		/category/**=IS_AUTHENTICATED_FULLY
		/register/**=IS_AUTHENTICATED_FULLY
		/user/**=ROLE_ADMIN
        /role/**=ROLE_ADMIN
        /login/**=IS_AUTHENTICATED_ANONYMOUSLY
		/logout/**=IS_AUTHENTICATED_ANONYMOUSLY
		/**=IS_AUTHENTICATED_ANONYMOUSLY
		
	"""
}}}
I added firstName and lastName intead of userRealName and for that I had to update all gsp files below User View.

I also use <g:loggedInUserInfo> to ouput first and last name in the topbar.

The book assumes in chapter 7 and 8 that you work by yourself analyzing existing code that you download. I understand this is done to present a full featured application for which details could take way more than a book, but at the same time I would rather pick as a beginner a book that push me to do everything without downloading code. I find that approach better for learning. The downloadable code is good to have it as well though.

There are some erratas I have reported which I am including here anyway:

   1. Mixing pure HTML and GSP in a form like below:
  {{{
  <form action="handleLogin">
  <g:actionSubmit	value="Login" />
  }}}
  results after submission in a URL like:
  {{{
  http://localhost:8080/collab-todo/user/handleLogin?userName=fred&_action_Login=Login
  }}}
  because the second line is translated to:
  {{{
  <input type="submit" name="_action_Login" value="Login" />
  }}}
  UserController will have to decide from two actions. Use either:
  {{{
  <form action="handleLogin">
  <input type="submit" value="Login"/>
  }}}
  or:
  {{{
  <g:form>
  <g:actionSubmit	action="handleLogin" value="Login" />
  }}}
  1. When running tests you get:
  {{{
  testHandleLoginInvalidUser	Error	Cannot send redirect - response is already committed
  }}}
  UserController.groovy is missing an else as below:
  {{{
  if (!user) {
    flash.message = "User not found for userName: ${params.userName}"
    redirect(action:'login')
  }else{
    session.user = user
    redirect(controller:'todo')
  }	
  }}}
  1. The below code:
  {{{
  if (session.user.id != params.id) {
  }}}
  should be:
  {{{
  if (session.user.id != params.id.toInteger()) {
  }}}
  1. The recommended entry in UrlMappings.groovy for REST is:
  {{{
  "/$rest/$controller/$id?"{
  }}}
  But it will cause a NullPointerException from RestController because domainClassName will be "Rest" *always*
  {{{
  domainClassName = capitalize(params.controller)
  }}}
  Just change "controller" by "realcontroller" for example.
  

Disclaimer: I am not hosting the source code that comes with the book but instead I am just reading the book and while making changes to the code I keep updating it on SVN so I can check out in different machines. If this action is illegal by any means please send me an email and I will remove the project.

=== svn ===
 Here is how I have checked in:
 {{{
 cd collab-todo
 svn checkout https://nestorurquiza.googlecode.com/svn/trunk/collab-todo/ .
 svn add *
 svn propset svn:ignore "bin-groovy" .
 svn propset svn:ignore "stacktrace.log" .
 svn propset svn:ignore "classes" web-app/WEB-INF
 svn commit -m "First commit"
 }}}
 Since I am using 'junction' in Windows to create symlinks and 'bin-groovy' points to WEB-INF/classes I had to repeat some of the commands:
 {{{
 svn add web-app/WEB-INF/*
 svn commit -m "First commit"
 }}}

=== mysql ===
I have worked for development using MySQL instead of HSQLDB:
 1. Download the driver from http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.6.tar.gz/from/pick#mirrors and put the jar file (mysql-connector-java-5.1.6-bin.jar) it in the Grails lib folder.
 1. Edit DataSource.groovy:
 {{{
 development {
	dataSource {			
		driverClassName = "com.mysql.jdbc.Driver"
	        username = "root"
	        password = ""
	        dbCreate = "update"
	        url = "jdbc:mysql://localhost:3306/collab_todo_dev"
	}
 }
 }}}
 Note we use "create-drop" and so if you started coding with HSQLDB you will end up with all your domain changes in place in MySQL after a "grails run-app"
 1. Create the dev db
 {{{
 create database collab_todo_dev 
 }}}
 